\documentclass[presentation]{beamer}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fixltx2e}

\usepackage{hyperref}

\newcommand{\Slang}{\texttt{S} }
\newcommand{\R}{\texttt{R} }
\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\mbox{\normalfont\textsf{#1}}}}

\definecolor{Red}{rgb}{0.7,0,0}
\definecolor{Blue}{rgb}{0,0,0.8}

\usepackage{hyperref}
\hypersetup{%
  pdfusetitle,
  bookmarks = {true},
  bookmarksnumbered = {true},
  bookmarksopen = {true},
  bookmarksopenlevel = 2,
  unicode = {true},
  breaklinks = {false},
  hyperindex = {true},
  colorlinks = {true},
  linktocpage = {true},
  plainpages = {false},
  linkcolor = {Blue},
  citecolor = {Blue},
  urlcolor = {Red},
  pdfstartview = {Fit},
  pdfpagemode = {UseOutlines},
  pdfview = {XYZ null null null}
}

\author{L. Gatto}

\date{\today}

\title{Functional programming in \texttt{R}}

\hypersetup{
  pdfkeywords={functional programming},
  pdfsubject={Functional programming in R}}

\begin{document}

\maketitle


\begin{frame}{Terminology}
  \begin{itemize}
  \item \emph{First-class functions} -- a function is a value just
    like any other variable. Functions can thus be used as arguments
    to other functions. Functions are considered \emph{first-class
      citizens}.

  \item \emph{Higher-order functions} -- refers to functions that take
    functions as parameters (input) or return functions (output).

  \item Illustrate cases where we 
    \begin{itemize}
    \item assign functions to variables or storing them in data structures
    \item pass functions as arguments to other functions
    \item return function as the values from other functions
    \end{itemize}
  \end{itemize}

\end{frame}


\begin{frame}
  \begin{block}{Functions as}
    \begin{itemize}
    \item functions stored as data structures
    \item functions as input and output
    \item functions and function arguments (recursion)
    \item function creating functions
    \end{itemize}
  \end{block}
\end{frame}

\begin{frame}[fragile]{Function stored as data structures}

  \begin{block}{An OO implementation}
<<>>=
L <- list(data = rnorm(5), fun = mean, res = NULL)
L
L$res <- L$fun(L$data)
L
@
  \end{block}

\end{frame}

\begin{frame}[fragile]{Function stored as data structures}

<<>>=
L <- list(data = rnorm(5), fun = mean, res = NULL)
L$res <- L$fun(L$data)
L
@

\end{frame}


\begin{frame}[fragile]{Functions as input and output}

<<>>=
10^(1:5)
`^`(10, seq(1, 5, 1))
@

\end{frame}

\begin{frame}[fragile]{Functions as input and output}

<<>>=
(v <- rnorm(6))
v[v > 0]
`[`(v, `>`(v, 0))
@

\end{frame}

\begin{frame}[fragile]{Functions and function arguments (recursion)}

<<>>=
fact <- function(x) 
    ifelse (x == 0 | x == 1,
            1,
            fact(x - 1) * x)
  
fact(3)
fact(6)
fact(fact(3))  
@

\end{frame}


\begin{frame}[fragile]{Function creating functions (1)}

<<>>=
make.power <- function(n) 
    function(x) x^n

  
cube <- make.power(3)
square <- make.power(2)
cube(2)
square(2)  
@
\end{frame}
  
\begin{frame}[fragile]{Function creating functions (2)}

<<>>=
colramp <- colorRampPalette(c("blue", "yellow"))
colramp(5)
@

\end{frame}

\begin{frame}[fragile]

<<dev='pdf', echo=FALSE, fig.height=4, fig.widht=10>>=
  par(mfrow=c(1,2))
  plot(1:10, col = colramp(10), pch = 19, cex = 2,
       main = "colramp(10)")
  plot(1:100, col = colramp(100), pch = 19, cex = 2,
       main = "colramp(100)")
@

\end{frame}

\begin{frame}[fragile]{Higher-order functions}

  \texttt{Reduce(f, x)} uses a binary function to successively
  combine the elements of a given vector and a possibly given
  initial value.

<<>>=
L <- replicate(3, matrix(rnorm(9), 3), simplify = FALSE)
Reduce("+", L)
sum(L)
@    

\end{frame}

\begin{frame}[fragile]{Higher-order functions}

<<>>=
## Using a vector to save space
Reduce("+", list(1, 2, 3), init = 10)
Reduce("+", list(1, 2, 3), accumulate = TRUE)
Reduce("+", list(1, 2, 3), right = TRUE, accumulate = TRUE)  
@

\end{frame}


\begin{frame}[fragile]{Higher-order functions}

  \texttt{Filter(f, x)} extracts the elements of a vector for which a
  predicate (logical) function gives true.

  \bigskip

  \texttt{Negate(f)}  creates the negation of a given function.

<<>>=
even <- function(x) x %% 2 == 0
(y <- sample(100, 10))
Filter(even, y)
Filter(Negate(even), y)
@

\end{frame}

\begin{frame}[fragile]{Higher-order functions}

  \texttt{Map(f, ...)} applies a function to the corresponding
  elements of given vectors. Similar to \texttt{mapply} without any
  attempt to simplify.

<<>>=
Map(even, 1:3)
@

\end{frame}

\begin{frame}[fragile]{Higher-order functions}

  \texttt{Find(f, x)} and \texttt{Position(f, x)} give the first (or
  last elements) and its position in the vector, for which a predicate
  (logical) function gives true.

<<>>=
Find(even, 10:15)
Find(even, 10:15, right = TRUE)
Position(Negate(even), 10:15)
Position(Negate(even), 10:15, right = TRUE)
@

\end{frame}


\begin{frame}{Conclusions}


  \begin{block}{A note on efficiency}
    Although these higher order functions are arguably elegant and
    allow powerful constructs (see references), they come at a slight
    speed cost compared to \texttt{mapply}, \texttt{[} and vectorised
    functions.
  \end{block}


  \textbf{Note:} Hadoop's \emph{MapReduce} model is a programming
  model for processing large data sets, typically used to do
  distributed computing on clusters of computers.  The model is
  inspired by the map and reduce functions commonly used in functional
  programming, although their purpose in the MapReduce framework is
  not the same as their original forms.
  (\url{http://en.wikipedia.org/wiki/MapReduce})

\end{frame}

\begin{frame}{References}

  \begin{itemize}
  \item R Gentleman, /R Programming for Bioinformatics/, CRC Press, 2008
  \item \texttt{?Map}, or any other of the higher order functions
  \item Blog post, \textit{Higher Order Functions in R}, John Myles White
    \url{http://www.johnmyleswhite.com/notebook/2010/09/23/higher-order-functions-in-r/}
  \end{itemize}

  \begin{itemize}
  \item This work is licensed under a CC BY-SA 3.0 License.
  \item Course web page and more material:
    \url{https://github.com/lgatto/TeachingMaterial}
  \end{itemize}

\end{frame}

\end{document}